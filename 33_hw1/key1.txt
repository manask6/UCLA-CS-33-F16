1.1
C-s P U B L I C enter 
C-s L a b o r a t o r y M-b
C-s S e l f - R e f e r e n t i a l C-M-b
C-s a r r o w M-b
C-e C-a


1.2
C-s H T M L c C-a C-k
C-s D E L E T E M E C-a C-k
C-s < ! - - C-a C-SP down down down C-w
C-s < ! - - C-s C-s C-a C-k


1.3
C-s A s s i g n m e n t 1 enter backspace 3 7 C-s A s s i g n m e n t 1 enter backspace 3 7
C-s U T F - 8 C-s C-s C-SP M-b M-b delete U S - A S C I I
C-s < / o C-a enter


1.4
C-x ] C-r D E L E T E M E C-a C-SP C-n C-w C-x [ C-s E m a c s < / h 2 down down C-y backspace
C-x ] C-r Y o u SP c a n C-a C-SP down down down C-w C-x [ C-s S u b m i t < / h 2 down down C-y backspace
C-x ] C-r l i k e C-a C-SP C-n C-w C-x [ C-s h u n t < / h 2 down down C-y backspace
C-x ] C-r 0 0 6 3 C-a C-SP C-n C-w C-x [ C-s d t d " > down down C-y backspace
C-s - - - e C-a C-SP C-x ] delete C-/ < ! - - C-x ] - - >
M-x r e p l a c e - s t r i n g o 1 enter O 1 enter


1.5 
M-x d i r e d enter M-x m a k e - d i r e c t o r y enter j u n k enter up(x9) enter
C-x C-f h e l l o . c enter (type c code from assignment)
M-x c o m p i l e enter g c c - fwrap -O2 -Wall -Wextra -S hello.c enter
C-x b h e l l o - o u t enter M-! . / a . o u t enter
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}


1.6
C-x right C-x right
( s e t q SP x SP ( r a n d o m ) ) C-j
( s e t q SP y SP ( r a n d o m ) ) C-j
( * SP x SP y ) C-j
M-: ( * SP x SP y ) 

1.6 Answers:
When using M-: to evaluate (* x y), the output shows the answer in base 10, base 8, and base 16.
The two "random" intergers are not random; they are generated from seed values (pseudo-randomness) and always come out to be roughly the same length.
The probablitity of the two-variable product being correct is zero, because all the random numbers produced are too high to avoid an overflow.